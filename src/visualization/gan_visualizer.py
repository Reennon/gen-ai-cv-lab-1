import matplotlib.pyplot as plt
import torch
from torchvision.utils import make_grid

class GANVisualizer:
    def __init__(self, model, latent_dim, device='cuda' if torch.cuda.is_available() else 'cpu'):
        """
        Visualizer for GANs.

        Args:
            model: Trained GAN model.
            latent_dim: Dimensionality of the latent space.
            device: Device to use for visualization.
        """
        self.model = model.to(device)
        self.latent_dim = latent_dim
        self.device = device

    def visualize_generated_images(self, num_samples=16):
        """
        Visualize images generated by the GAN.

        Args:
            num_samples: Number of images to generate.
        """
        self.model.eval()

        # Generate random latent vectors
        z = torch.randn(num_samples, self.latent_dim, device=self.device)

        # Generate images
        with torch.no_grad():
            generated_imgs = self.model(z).view(-1, 3, 32, 32)  # Reshape to image format

        # Normalize images to [0, 1] for visualization
        generated_imgs = (generated_imgs + 1) / 2  # Assuming output is scaled to [-1, 1]

        # Create a grid of images
        grid = make_grid(generated_imgs, nrow=4, normalize=True)

        # Plot
        plt.figure(figsize=(8, 8))
        plt.imshow(grid.permute(1, 2, 0).cpu().numpy())
        plt.axis('off')
        plt.title("Generated Images")
        plt.show()
